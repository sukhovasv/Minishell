#!/bin/bash

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Counters
PASSED=0
FAILED=0
TOTAL=0

# Function to print test results
print_result() {
    local test_name=$1
    local result=$2
    local expected=$3
    local actual=$4

    ((TOTAL++))

    if [ "$result" = "pass" ]; then
        echo -e "${GREEN}[PASS]${NC} $test_name"
        ((PASSED++))
    else
        echo -e "${RED}[FAIL]${NC} $test_name"
        echo -e "Expected:\n$expected"
        echo -e "Got:\n$actual"
        ((FAILED++))
    fi
}

# Function to compare output, ignoring DEBUG messages
compare_with_bash() {
    local cmd="$1"
    
    # Get bash output (filtered)
    bash_output=$(echo "$cmd" | bash 2>&1 | grep -v "DEBUG:")
    bash_exit=$?

    # Get minishell output (filtered)
    minishell_output=$(echo "$cmd" | ./minishell 2>&1 | grep -v "DEBUG:")
    minishell_exit=$?

    if [ "$bash_output" = "$minishell_output" ] && [ $bash_exit -eq $minishell_exit ]; then
        print_result "Command: $cmd" "pass" "" ""
    else
        print_result "Command: $cmd" "fail" "$bash_output" "$minishell_output"
    fi
}

# TEST CASES

# üü¢ –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
compare_with_bash "echo hello"
compare_with_bash "ls -l"
compare_with_bash "pwd"

# üü¢ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ `&&`)
compare_with_bash "export TESTVAR=42"
compare_with_bash "echo \$TESTVAR"
compare_with_bash "unset TESTVAR"
compare_with_bash "echo \$TESTVAR"

# üü¢ –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
compare_with_bash "echo \$?"
compare_with_bash "echo \$HOME"
compare_with_bash "echo \$USER"

# üü¢ –ü—Ä–æ—Å—Ç—ã–µ –ø–∞–π–ø—ã
compare_with_bash "echo hello | grep hello"
compare_with_bash "ls | wc -l"

# üü¢ –ü—Ä–æ—Å—Ç—ã–µ heredoc
compare_with_bash "cat << EOF
hello
world
EOF"

compare_with_bash "cat << EOF | grep hello
hello
world
EOF"

# üü¢ Heredoc + —Ä–µ–¥–∏—Ä–µ–∫—Ç—ã
compare_with_bash "cat << EOF > testfile
hello
world
EOF
cat testfile"

compare_with_bash "cat << EOF >> testfile
append
EOF
cat testfile"

compare_with_bash "rm testfile"

# üü¢ Heredoc + –ø–∞–π–ø—ã
compare_with_bash "cat << EOF | grep hello | wc -l
hello
world
hello
EOF"

compare_with_bash "cat << EOF | sort | uniq | wc -l
banana
apple
banana
orange
EOF"

# üü¢ –ù–µ—Å–∫–æ–ª—å–∫–æ `heredoc` –≤ –æ–¥–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
compare_with_bash "cat << EOF1 | grep hello | cat << EOF2 | wc -l
hello
EOF1
world
EOF2"

# üü¢ –ü–∞–π–ø—ã —Å `heredoc` –∏ —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞–º–∏
compare_with_bash "cat << EOF | grep hello | tee output.txt | cat
hello
world
hello
EOF"

compare_with_bash "rm output.txt"

# üü¢ –ù–µ—Å–∫–æ–ª—å–∫–æ –ø–∞–π–ø–æ–≤ —Å heredoc (–∫–ª—é—á–µ–≤–æ–π —Ç–µ—Å—Ç!)
compare_with_bash "cat << EOF | grep hello | sort | uniq | wc -l
hello
banana
world
hello
EOF"

compare_with_bash "cat << EOF | grep hello | grep world | wc -l
hello world
hello
world
EOF"

# üü¢ Builtins (cd, export, unset, env, exit)
compare_with_bash "cd /tmp && pwd"
compare_with_bash "env | grep PATH"
compare_with_bash "exit 42"

# üü¢ –í–ª–æ–∂–µ–Ω–Ω—ã–µ minishell
compare_with_bash "./minishell -c 'echo nested'"

# üî¥ –û—à–∏–±–∫–∏: –ø–∞–π–ø –≤ –Ω–∞—á–∞–ª–µ
compare_with_bash "| echo error"

# üî¥ –û—à–∏–±–∫–∏: –Ω–µ–∑–∞–∫—Ä—ã—Ç–∞—è –∫–∞–≤—ã—á–∫–∞
compare_with_bash "echo 'Unclosed quote"

# üî¥ –û—à–∏–±–∫–∏: cat < –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ñ–∞–π–ª
compare_with_bash "cat < non_existent_file"

# üî¥ –û—à–∏–±–∫–∏: heredoc –±–µ–∑ EOF
compare_with_bash "<< EOF | wc -l
hello
EOF"

# üü¢ –û–±—Ä–∞–±–æ—Ç–∫–∞ `Ctrl-C`, `Ctrl-D`, `Ctrl-\`
echo -e "\n${YELLOW}!!! –î–ª—è —Ä—É—á–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–ø—É—Å—Ç–∏ minishell –∏ –ø–æ–ø—Ä–æ–±—É–π:${NC}"
echo -e "${YELLOW}  1. –ù–∞–∂–º–∏ Ctrl-C ‚Üí –¥–æ–ª–∂–µ–Ω –ø–æ—è–≤–∏—Ç—å—Å—è –Ω–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç.${NC}"
echo -e "${YELLOW}  2. –ù–∞–∂–º–∏ Ctrl-D ‚Üí minishell –¥–æ–ª–∂–µ–Ω –∑–∞–≤–µ—Ä—à–∏—Ç—å—Å—è.${NC}"
echo -e "${YELLOW}  3. –ù–∞–∂–º–∏ Ctrl-\\ ‚Üí –¥–æ–ª–∂–Ω–æ –Ω–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ–π—Ç–∏.${NC}"

# üü° –ò—Ç–æ–≥
echo -e "\n${YELLOW}Total: $TOTAL | Passed: $PASSED | Failed: $FAILED${NC}"
